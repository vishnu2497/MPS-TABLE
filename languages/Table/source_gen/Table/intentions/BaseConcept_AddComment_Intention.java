package Table.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BaseConcept_AddComment_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public BaseConcept_AddComment_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:9359af2e-dc93-4ef4-b866-2cccb9dc01a7(Table.intentions)", "7869003205683733665"));
  }
  @Override
  public String getPresentation() {
    return "BaseConcept_AddComment";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(CONCEPTS.BaseConceptComment$OO)) == null) ? "Add" : "Remove")) + " Comment to " + node + " (" + SNodeOperations.getConcept(node).getName() + ")";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(CONCEPTS.BaseConceptComment$OO)) == null)) {
        AttributeOperations.createAndSetAttrbiute(node, new IAttributeDescriptor.NodeAttribute(CONCEPTS.BaseConceptComment$OO), CONCEPTS.BaseConceptComment$OO);
      } else {
        SNodeOperations.deleteNode(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(CONCEPTS.BaseConceptComment$OO)));
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return BaseConcept_AddComment_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BaseConceptComment$OO = MetaAdapterFactory.getConcept(0x2d56439e634d4d25L, 0x9d30963e89ecda48L, 0x6d3450b94b2f7dc8L, "de.slisson.mps.tables.demolang.structure.BaseConceptComment");
  }
}
