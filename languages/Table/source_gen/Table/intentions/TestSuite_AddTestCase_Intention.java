package Table.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public final class TestSuite_AddTestCase_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public TestSuite_AddTestCase_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:9359af2e-dc93-4ef4-b866-2cccb9dc01a7(Table.intentions)", "4786391186599446994"));
  }
  @Override
  public String getPresentation() {
    return "TestSuite_AddTestCase";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add TestCase";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode testCase = SLinkOperations.addNewChild(node, LINKS.tests$rkAW, null);
      SPropertyOperations.assign(testCase, PROPS.name$tAp1, "TestCase" + SNodeOperations.getIndexInParent(testCase));

    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return TestSuite_AddTestCase_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink tests$rkAW = MetaAdapterFactory.getContainmentLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c2eL, 0x41d3cf74efea1c3eL, "tests");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
