package Table.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import de.slisson.mps.tables.runtime.cells.ChildsTracker;
import de.slisson.mps.tables.runtime.gridmodel.Grid;
import jetbrains.mps.openapi.editor.style.Style;
import de.slisson.mps.tables.runtime.style.ITableStyleFactory;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.nodeEditor.cells.EditorCell_Error;
import de.slisson.mps.tables.runtime.cells.PartialTableEditor;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import de.slisson.mps.tables.runtime.style.VerticalAlignment;
import de.slisson.mps.tables.runtime.style.HorizontalAlignment;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellGridLeaf;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import de.slisson.mps.tables.runtime.gridmodel.HeaderGrid;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSColors;
import de.slisson.mps.tables.runtime.gridmodel.Header;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellHeader;
import de.slisson.mps.tables.runtime.gridmodel.StringHeaderReference;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import de.slisson.mps.tables.runtime.gridmodel.GridAdapter;
import de.slisson.mps.tables.runtime.substitute.SubstituteInfoFactory;
import de.slisson.mps.tables.runtime.gridmodel.ITableGrid;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import de.slisson.mps.tables.runtime.substitute.NodeSubstituter;
import de.slisson.mps.tables.runtime.gridmodel.IGridElement;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

/*package*/ class TestCase_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public TestCase_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createPartialTable_1();
  }

  private jetbrains.mps.nodeEditor.cells.EditorCell createPartialTable_0(final EditorContext editorContext, final SNode node) {
    ChildsTracker childsTracker = null;

    try {
      ChildsTracker.pushNewInstance();
      final Grid grid = createStaticHorizontal_g8b7hx_a0(editorContext, node);
      final Style style = new ITableStyleFactory() {
        public Style createStyle(final int columnIndex, final int rowIndex) {
          Style style = new StyleImpl();
          final EditorCell editorCell = null;
          return style;
        }
      }.createStyle(0, 0);
      grid.setStyle(style);

      childsTracker = ChildsTracker.popInstance();
      if (childsTracker == null) {
        return new EditorCell_Error(editorContext, node, "not inside table");
      }
      PartialTableEditor editorCell = new PartialTableEditor(editorContext, node, grid);
      ChildsTracker.getInstance().registerChild(editorCell);
      editorCell.initChilds(childsTracker);

      editorCell.setCellId("PartialTable_g8b7hx_a");
      editorCell.setBig(true);
      setCellContext(editorCell);
      editorCell.init();
      return editorCell;
    } catch (RuntimeException ex) {
      if (childsTracker == null) {
        ChildsTracker.popInstance();
      }
      throw ex;
    }
  }
  private EditorCell createPartialTable_1() {
    return createPartialTable_0(getEditorContext(), myNode);
  }
  public Grid createStaticHorizontal_g8b7hx_a0(final EditorContext editorContext, final SNode node) {
    Grid grid = new Grid();

    List<Grid> children = new ArrayList<Grid>(2);
    if (true) {
      children.add(createTableCell_g8b7hx_a0a(editorContext, node));
    }
    if (true) {
      children.add(createGridQuery_g8b7hx_b0a(editorContext, node));
    }
    int maxHeight = grid.getRowHeadersSizeY();
    for (Grid child : ListSequence.fromList(children)) {
      maxHeight = Math.max(maxHeight, child.getSizeY());
    }
    for (int x = 0; x < children.size(); x++) {
      if (maxHeight > 0) {
        children.get(x).setSpanY(maxHeight);
      }
      grid.setElement(x, 0, children.get(x));
    }
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        final EditorCell editorCell = null;
        return style;
      }
    }.createStyle(0, 0);
    grid.setStyle(style);
    return grid;
  }
  public Grid createTableCell_g8b7hx_a0a(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createProperty_0();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        final EditorCell editorCell = null;
        style.set(StyleAttributes.getInstance().<VerticalAlignment>getAttribute("de.slisson.mps.tables", "vertical-alignment"), VerticalAlignment.CENTER);
        style.set(StyleAttributes.getInstance().<HorizontalAlignment>getAttribute("de.slisson.mps.tables", "horizontal-alignment"), HorizontalAlignment.CENTER);
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }
    grid.setColumnHeaders(0, 0, createEditorCellHeader_g8b7hx_a0a0(editorContext, node));

    return grid;
  }
  private EditorCell createProperty_0() {
    getCellFactory().pushCellContext();
    try {
      final SProperty property = PROPS.name$tAp1;
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
      editorCell.setDefaultText("<no name>");
      editorCell.setCellId("property_name");
      am_TestCase.setCellActions(editorCell, myNode, getEditorContext());
      editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
      setCellContext(editorCell);
      Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(AttributeOperations.getAttributeList(myNode, new IAttributeDescriptor.AllAttributes()), CONCEPTS.PropertyAttribute$jT);
      Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
        }
      });
      if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  public HeaderGrid createEditorCellHeader_g8b7hx_a0a0(final EditorContext editorContext, final SNode node) {
    HeaderGrid grid = new HeaderGrid();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        final EditorCell editorCell = null;
        style.set(StyleAttributes.getInstance().<VerticalAlignment>getAttribute("de.slisson.mps.tables", "vertical-alignment"), VerticalAlignment.CENTER);
        style.set(StyleAttributes.getInstance().<HorizontalAlignment>getAttribute("de.slisson.mps.tables", "horizontal-alignment"), HorizontalAlignment.CENTER);
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "shade-color"), MPSColors.blue);
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell cell = createConstant_0();
    Header header = new EditorCellHeader(new StringHeaderReference("2522915415606835704"), cell);
    header.setStyle(style);
    grid.setElement(0, 0, header);
    return grid;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "ID");
    editorCell.setCellId("Constant_g8b7hx_a0a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.BACKGROUND_COLOR, (Color) null);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  public Grid createGridQuery_g8b7hx_b0a(final EditorContext editorContext, final SNode node) {
    EditorCell editorCell = null;
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        final EditorCell editorCell = null;
        return style;
      }
    }.createStyle(0, 0);

    Grid grid = new Grid();
    GridAdapter gridAdapter = new GridAdapter(grid, editorContext, node);
    SubstituteInfoFactory substituteInfoFactory = new SubstituteInfoFactory(editorContext);
    new Object() {
      public void fillGrid(final ITableGrid grid, final SNode node, final SubstituteInfoFactory substituteInfoFactory) {
        int x = 0;
        List<SNode> variables = SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.TestSuite$Lw, false, false), LINKS.rule$rkBU), LINKS.variables$rkOX);
        grid.setSize(ListSequence.fromList(variables).count(), 1);
        grid.setColumnHeader(0, 0, ListSequence.fromList(variables).count(), 1, "Levels");
        grid.setColumnHeaderStyle(0, 0, StyleAttributes.getInstance().<HorizontalAlignment>getAttribute("de.slisson.mps.tables", "horizontal-alignment"), HorizontalAlignment.CENTER);
        for (final SNode var : ListSequence.fromList(variables)) {
          final SNode value = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.values$rfu_)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SLinkOperations.getTarget(it, LINKS.variable$rkEI) == var;
            }
          });
          grid.setCell(x, 0, SLinkOperations.getTarget(value, LINKS.value$rkDK));
          grid.setColumnHeader(x, 1, SPropertyOperations.getString(var, PROPS.name$tAp1));
          grid.setSubstituteInfo(x, 0, substituteInfoFactory.forWrapper(node, SLinkOperations.getTarget(value, LINKS.value$rkDK), LINKS.value$rkDK, LINKS.value$rkDK.getTargetConcept(), new NodeSubstituter() {
            @Override
            public SNode substituteNode(SNode newNode, SNode currentNode) {
              SNode value_ = value;
              if (value_ == null) {
                value_ = SLinkOperations.addNewChild(node, LINKS.values$rfu_, null);
                SLinkOperations.setTarget(value_, LINKS.variable$rkEI, var);
              }
              return SLinkOperations.setTarget(value_, LINKS.value$rkDK, newNode);
            }
          }));
          x++;
        }
      }
    }.fillGrid(gridAdapter, node, substituteInfoFactory);

    for (IGridElement element : Sequence.fromIterable(grid)) {
      if (element instanceof EditorCellGridLeaf) {
        ((EditorCellGridLeaf) element).getEditorCell().getStyle().putAll(style);
      }
    }
    return grid;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PropertyAttribute$jT = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
    /*package*/ static final SConcept TestSuite$Lw = MetaAdapterFactory.getConcept(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c2eL, "Table.structure.TestSuite");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink rule$rkBU = MetaAdapterFactory.getReferenceLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c2eL, 0x41d3cf74efea1c40L, "rule");
    /*package*/ static final SContainmentLink variables$rkOX = MetaAdapterFactory.getContainmentLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c18L, 0x41d3cf74efea1c48L, "variables");
    /*package*/ static final SContainmentLink values$rfu_ = MetaAdapterFactory.getContainmentLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c1dL, 0x41d3cf74efea1c3aL, "values");
    /*package*/ static final SReferenceLink variable$rkEI = MetaAdapterFactory.getReferenceLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c32L, 0x41d3cf74efea1c45L, "variable");
    /*package*/ static final SContainmentLink value$rkDK = MetaAdapterFactory.getContainmentLink(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c32L, 0x41d3cf74efea1c43L, "value");
  }
}
