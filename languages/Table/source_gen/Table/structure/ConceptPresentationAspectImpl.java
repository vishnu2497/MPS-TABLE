package Table.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BaseCoceptComment;
  private ConceptPresentation props_RootConcept;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_TestCase;
  private ConceptPresentation props_TestCaseComment;
  private ConceptPresentation props_TestSuite;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableValue;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BaseCoceptComment:
        if (props_BaseCoceptComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BaseCoceptComment");
          props_BaseCoceptComment = cpb.create();
        }
        return props_BaseCoceptComment;
      case LanguageConceptSwitch.RootConcept:
        if (props_RootConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RootConcept");
          props_RootConcept = cpb.create();
        }
        return props_RootConcept;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.TestCase:
        if (props_TestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestCase = cpb.create();
        }
        return props_TestCase;
      case LanguageConceptSwitch.TestCaseComment:
        if (props_TestCaseComment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("comment");
          props_TestCaseComment = cpb.create();
        }
        return props_TestCaseComment;
      case LanguageConceptSwitch.TestSuite:
        if (props_TestSuite == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c2eL, 0x41d3cf74efea1c40L, "rule", "", "");
          props_TestSuite = cpb.create();
        }
        return props_TestSuite;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableValue:
        if (props_VariableValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x47a015d346f64146L, 0xb38ba6894b8669ceL, 0x41d3cf74efea1c32L, 0x41d3cf74efea1c45L, "variable", "", "");
          props_VariableValue = cpb.create();
        }
        return props_VariableValue;
    }
    return null;
  }
}
